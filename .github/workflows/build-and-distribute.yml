name: Build and Distribute Tokens

on:
  push:
    branches: [ main ]
    paths:
      - 'tokens/**'
      - 'build.js'
      - 'config.js'
      - 'src/**'
      - '.github/workflows/build-and-distribute.yml'

jobs:
  # ===============================================
  # JOB 1: BUILD THE TOKENS ONCE
  # ===============================================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Style Dictionary repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build tokens
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # Name the artifact so we can find it later
          name: design-tokens
          # Specify the directory to upload
          path: build/

  # ===============================================
  # JOB 2: DISTRIBUTE TOKENS TO TARGET REPOS
  # ===============================================
  distribute:
    # This job will only start after the 'build' job has finished successfully
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target-repo:
          - kunalkatre21/web-app
          - kunalkatre21/android-app
          - kunalkatre21/ios-app

    steps:
      - name: Checkout Style Dictionary repo
        # We still need the code for the distribution script itself
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          # Use the same name as the artifact we uploaded
          name: design-tokens
          # Download the files into a 'build' directory in our current workspace
          path: build/

      - name: Process repository ${{ matrix.target-repo }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TARGET_REPO: ${{ matrix.target-repo }}
        run: |
          set -ex

          echo "üöÄ Processing repository: $TARGET_REPO"

          # --- LOUDLY LIST THE DOWNLOADED ARTIFACTS ---
          # The path is now 'build/', not '../build/'
          echo "--- Listing Downloaded Build Artifacts ---"
          ls -R build
          echo "-------------------------------"

          # Clone target repository
          gh repo clone $TARGET_REPO temp-repo
          cd temp-repo

          # Create a new branch
          BRANCH_NAME="tokens/update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME

          # --- ROBUST FILE COPYING ---
          # Note the path is now '../build/' because we are inside the 'temp-repo' directory
          if [[ "$TARGET_REPO" == "kunalkatre21/web-app" ]]; then
            echo "Copying web tokens..."
            mkdir -p src/styles/tokens
            cp -vr ../build/css/* src/styles/tokens/
          elif [[ "$TARGET_REPO" == "kunalkatre21/android-app" ]]; then
            echo "Copying Android & Compose tokens..."
            mkdir -p app/src/main/assets/design-tokens
            cp -vr ../build/compose/* app/src/main/assets/design-tokens/
            cp -vr ../build/android/* app/src/main/assets/design-tokens/
          elif [[ "$TARGET_REPO" == "kunalkatre21/ios-app" ]]; then
            echo "Copying iOS tokens..."
            mkdir -p DesignTokens/
            cp -vr ../build/ios-swift/* DesignTokens/
            cp -vr ../build/ios-colorsets/* DesignTokens/
          fi

          # --- GIT STATUS CHECK ---
          echo "--- Git Status After Copy ---"
          git status
          echo "-----------------------------"

          if git diff --quiet && git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes were detected by git. The script will now stop for this repository."
          else
            echo "üìù Changes detected, creating PR..."
            # Configure git user for the commit
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "feat(tokens): ‚ú® Update design tokens" -m "Automated update from MyStyleD workflow."
            git push origin $BRANCH_NAME
            gh pr create \
              --title "üé® Tokens: Automated Design System Update" \
              --body "This PR was automatically generated by the MyStyleD workflow and contains the latest design token updates." \
              --base main \
              --head $BRANCH_NAME
            echo "‚úÖ PR created successfully for $TARGET_REPO"
          fi

          cd ..
          rm -rf temp-repo